{"version":3,"sources":["components/Label/Label.js","components/ProgressBar/Progressbar.js","components/TextInput/TextInput.js","components/EyeIcon/EyeIcon.js","components/PasswordInput/PasswordInput.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","htmlFor","label","required","style","display","color","Progressbar","getColor","percent","props","getWidthAsPercentOfTotalWidth","parseInt","width","this","height","border","backgroundColor","Component","defaultProps","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","marginBottom","id","className","EyeIcon","xmlns","viewBox","transform","fill","d","cx","cy","r","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","length","ProgressBar","React","module","exports","Example","ExampleOptional","ExampleRequired","ExampleAllFeatures","password","target","minLength","getQuality","Example100Percent","Example10Percent","Example70Percent","ExampleError","HelloWorld","message","ExampleHelloWorld","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","Object","getOwnPropertyNames","confirmationMessage","passwordQuality","ExampleRegistrationForm","console","log","TextInputBEM","styles","fieldset","inputError","TextInputCSSModules","Error","styled","div","Input","input","Fieldset","TextInputStyledComponents","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","toggleCode","showCode","example","description","ExampleComponent","require","componentName","default","Props","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3dfcbe7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label with required field display, htmlFor, and block styling */\r\nfunction Label({htmlFor, label, required}) {\r\n  return (\r\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\r\n      {label} { required && <span style={{color: 'red'}}> *</span>}\r\n    </label>\r\n  )\r\n}\r\n\r\nLabel.propTypes = {\r\n  /** HTML ID for associated input */\r\n  htmlFor: PropTypes.string.isRequired,\r\n\r\n  /** Label text */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Display asterisk after label if true */\r\n  required: PropTypes.bool\r\n};\r\n\r\nexport default Label;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Progressbar extends Component {\r\n  getColor = (percent) => {\r\n    if (this.props.percent === 100) return 'green';\r\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\r\n  }\r\n\r\n  getWidthAsPercentOfTotalWidth = () => {\r\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\r\n  }\r\n\r\n  render() {\r\n    const {percent, width, height} = this.props;\r\n    return (\r\n      <div style={{border: 'solid 1px lightgray', width: width}}>\r\n        <div style={{\r\n          width: this.getWidthAsPercentOfTotalWidth(),\r\n          height,\r\n          backgroundColor: this.getColor(percent)\r\n        }} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nProgressbar.propTypes = {\r\n  /** Percent of progress completed */\r\n  percent: PropTypes.number.isRequired,\r\n\r\n  /** Bar width */\r\n  width: PropTypes.number.isRequired,\r\n\r\n  /** Bar height */\r\n  height: PropTypes.number\r\n};\r\n\r\nProgressbar.defaultProps = {\r\n  height: 5\r\n};\r\n\r\n\r\nexport default Progressbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div style={{marginBottom: 16}}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && {border: 'solid 1px red'}}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default TextInput;\r\n\r\n","import React from 'react';\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n    // Attribution: Fabian Alexis at https://commons.wikimedia.org.wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default EyeIcon;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false\r\n    }\r\n  }\r\n\r\n  toggleShowPassword = event => {\r\n    this.setState(prevState => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <TextInput\r\n        htmlId={htmlId}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        type={showPassword ? 'text' : 'password'}\r\n        onChange={onChange}\r\n        value={value}\r\n        maxLength={maxLength}\r\n        error={error}\r\n        required\r\n        {...props}>\r\n        {\r\n          showVisibilityToggle &&\r\n          <a\r\n            href=\"\"\r\n            onClick={this.toggleShowPassword}\r\n            style={{ marginLeft: 5 }}>\r\n            <EyeIcon />\r\n          </a>\r\n        }\r\n        {\r\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n        }\r\n      </TextInput>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: 'Password'\r\n};\r\n\r\nexport default PasswordInput;","module.exports = /* eslint-disable */ [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\r\\n\\r\\n/** SVG Eye Icon */\\r\\nfunction EyeIcon() {\\r\\n    // Attribution: Fabian Alexis at https://commons.wikimedia.org.wiki/File:Antu_view-preview.svg\\r\\n  return (\\r\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\r\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\r\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n      </g>\\r\\n    </svg>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default EyeIcon;\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from 'react';\\r\\nimport EyeIcon from 'ps-react-tarts85/EyeIcon';\\r\\n\\r\\nexport default function Example() {\\r\\n  return <EyeIcon />\\r\\n}\\r\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A super lame component that says Hello with a custom message.\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'World'\",\"computed\":false}}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** A super lame component that says Hello with a custom message. */\\r\\nconst HelloWorld = ({ message }) => {\\r\\n  return <div>Hello {message}</div>;\\r\\n};\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n  /** Message to display */\\r\\n  message: PropTypes.string,\\r\\n};\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n  message: 'World',\\r\\n};\\r\\n\\r\\nexport default HelloWorld;\\r\\n\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom message\",\"code\":\"import React from 'react';\\r\\nimport HelloWorld from 'ps-react-tarts85/HelloWorld';\\r\\n\\r\\n/** Custom message */\\r\\nexport default function ExampleHelloWorld() {\\r\\n  return <HelloWorld message='Pluralsight viewers!' />;\\r\\n}\\r\\n\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor, and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** Label with required field display, htmlFor, and block styling */\\r\\nfunction Label({htmlFor, label, required}) {\\r\\n  return (\\r\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\r\\n      {label} { required && <span style={{color: 'red'}}> *</span>}\\r\\n    </label>\\r\\n  )\\r\\n}\\r\\n\\r\\nLabel.propTypes = {\\r\\n  /** HTML ID for associated input */\\r\\n  htmlFor: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Label text */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Display asterisk after label if true */\\r\\n  required: PropTypes.bool\\r\\n};\\r\\n\\r\\nexport default Label;\\r\\n\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\r\\nimport Label from 'ps-react-tarts85/Label';\\r\\n\\r\\n/** Optional label */\\r\\nexport default function ExampleOptional() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\r\\n}\\r\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from 'react';\\r\\nimport Label from 'ps-react-tarts85/Label';\\r\\n\\r\\n/** Required label */\\r\\nexport default function ExampleRequired() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\r\\n}\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport ProgressBar from '../ProgressBar';\\r\\nimport EyeIcon from '../EyeIcon';\\r\\nimport TextInput from '../TextInput';\\r\\n\\r\\n/** Password input with integrated label, quality tips, and show password toggle. */\\r\\nclass PasswordInput extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      showPassword: false\\r\\n    }\\r\\n  }\\r\\n\\r\\n  toggleShowPassword = event => {\\r\\n    this.setState(prevState => {\\r\\n      return { showPassword: !prevState.showPassword };\\r\\n    });\\r\\n    if (event) event.preventDefault();\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\r\\n    const { showPassword } = this.state;\\r\\n\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId={htmlId}\\r\\n        label={label}\\r\\n        placeholder={placeholder}\\r\\n        type={showPassword ? 'text' : 'password'}\\r\\n        onChange={onChange}\\r\\n        value={value}\\r\\n        maxLength={maxLength}\\r\\n        error={error}\\r\\n        required\\r\\n        {...props}>\\r\\n        {\\r\\n          showVisibilityToggle &&\\r\\n          <a\\r\\n            href=\\\"\\\"\\r\\n            onClick={this.toggleShowPassword}\\r\\n            style={{ marginLeft: 5 }}>\\r\\n            <EyeIcon />\\r\\n          </a>\\r\\n        }\\r\\n        {\\r\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\r\\n        }\\r\\n      </TextInput>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Password value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /** Function called when password input value changes */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Max password length accepted */\\r\\n  maxLength: PropTypes.number,\\r\\n\\r\\n  /** Placeholder displayed when no password is entered */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Set to true to show the toggle for displaying the currently entered password */\\r\\n  showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\r\\n  quality: PropTypes.number,\\r\\n\\r\\n  /** Validation error to display */\\r\\n  error: PropTypes.string\\r\\n};\\r\\n\\r\\nPasswordInput.defaultProps = {\\r\\n  maxLength: 50,\\r\\n  showVisibilityToggle: false,\\r\\n  label: 'Password'\\r\\n};\\r\\n\\r\\nexport default PasswordInput;\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React, { Component } from 'react';\\r\\nimport PasswordInput from 'ps-react-tarts85/PasswordInput';\\r\\n\\r\\n/** All features enabled */\\r\\nclass ExampleAllFeatures extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n        password: ''\\r\\n    }\\r\\n  }\\r\\n\\r\\n  getQuality() {\\r\\n    const length = this.state.password.length;\\r\\n    return length > 10 ? 100 : length * 10;\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"password-input-example-all-features\\\"\\r\\n          name=\\\"password\\\"\\r\\n          onChange={ event => this.setState({ password: event.target.value })}\\r\\n          value={this.state.password}\\r\\n          minLength={8}\\r\\n          placeholder=\\\"Enter password\\\"\\r\\n          showVisibilityToggle\\r\\n          quality={this.getQuality()}\\r\\n          {...this.props} />\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default ExampleAllFeatures;\\r\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React, { Component } from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\nclass Progressbar extends Component {\\r\\n  getColor = (percent) => {\\r\\n    if (this.props.percent === 100) return 'green';\\r\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\r\\n  }\\r\\n\\r\\n  getWidthAsPercentOfTotalWidth = () => {\\r\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {percent, width, height} = this.props;\\r\\n    return (\\r\\n      <div style={{border: 'solid 1px lightgray', width: width}}>\\r\\n        <div style={{\\r\\n          width: this.getWidthAsPercentOfTotalWidth(),\\r\\n          height,\\r\\n          backgroundColor: this.getColor(percent)\\r\\n        }} />\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nProgressbar.propTypes = {\\r\\n  /** Percent of progress completed */\\r\\n  percent: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar width */\\r\\n  width: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar height */\\r\\n  height: PropTypes.number\\r\\n};\\r\\n\\r\\nProgressbar.defaultProps = {\\r\\n  height: 5\\r\\n};\\r\\n\\r\\n\\r\\nexport default Progressbar;\\r\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress and height 20px\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'ps-react-tarts85/ProgressBar';\\r\\n\\r\\n/** 100% progress and height 20px */\\r\\nexport default function Example100Percent() {\\r\\n  return <ProgressBar percent={100} width={150} height={20} />\\r\\n}\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'ps-react-tarts85/ProgressBar';\\r\\n\\r\\n/** 10% progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={10} width={150} />\\r\\n}\\r\\n\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'ps-react-tarts85/ProgressBar';\\r\\n\\r\\n/** 70% progress */\\r\\nexport default function Example70Percent() {\\r\\n  return <ProgressBar percent={70} width={150} />\\r\\n}\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React, { Component } from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport TextInput from '../TextInput';\\r\\nimport PasswordInput from '../PasswordInput';\\r\\n\\r\\n/** Registration form with built-in validation */\\r\\nclass RegistrationForm extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      user: {\\r\\n          email: '',\\r\\n          password: ''\\r\\n      },\\r\\n      errors: {},\\r\\n      submitted: false,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  onChange = (event) => {\\r\\n    const user = this.state.user;\\r\\n    user[event.target.name] = event.target.value;\\r\\n    this.setState({user});\\r\\n  }\\r\\n\\r\\n  // Returns a number from 0 to 100 that represents password quality.\\r\\n  // From simplicity, just returning % of min length entered.\\r\\n  // Could enhance with checks for number, special char, unique char, etc.\\r\\n  passwordQuality(password) {\\r\\n    if (!password) return null;\\r\\n    if (password.length >= this.props.minPasswordLength) return 100;\\r\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\r\\n    return percentOfMinLength;\\r\\n  }\\r\\n\\r\\n  validate({email, password}) {\\r\\n    const errors = {};\\r\\n    const {minPasswordLength} = this.props;\\r\\n\\r\\n    if (!email) errors.email = 'Email required.';\\r\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\r\\n\\r\\n    this.setState({errors});\\r\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\r\\n    return formIsValid;\\r\\n  }\\r\\n\\r\\n  onSubmit = () => {\\r\\n    const {user} = this.state;\\r\\n    const formIsValid = this.validate(user);\\r\\n    if (formIsValid) {\\r\\n        this.props.onSubmit(user);\\r\\n        this.setState({submitted: true});\\r\\n    }\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {errors, submitted} = this.state;\\r\\n    const {email, password} = this.state.user;\\r\\n\\r\\n    return (\\r\\n      submitted ? \\r\\n      <h2>{this.props.confirmationMessage}</h2> :\\r\\n      <div>\\r\\n        <TextInput\\r\\n          htmlId=\\\"registration-form-email\\\"\\r\\n          name=\\\"email\\\"\\r\\n          onChange={this.onChange}\\r\\n          label=\\\"Email\\\"\\r\\n          value={email}\\r\\n          errors={errors.email}\\r\\n          required />\\r\\n\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"registration-form-password\\\"\\r\\n          name=\\\"password\\\"\\r\\n          value={password}\\r\\n          onChange={this.onChange}\\r\\n          quality={this.passwordQuality(password)}\\r\\n          showVisibilityToggle\\r\\n          maxLength={50}\\r\\n          error={errors.password} />\\r\\n        \\r\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n  /** Message displayed upon successful submission */\\r\\n  confirmationMessage: PropTypes.string,\\r\\n\\r\\n  /** Called when form is submitted */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Minimum password length */\\r\\n  minPasswordLength: PropTypes.number\\r\\n};\\r\\n\\r\\nRegistrationForm.defaultProps = {\\r\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\r\\n  minPasswordLength: 8\\r\\n};\\r\\n\\r\\nexport default RegistrationForm;\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React, { Component } from 'react';\\r\\nimport RegistrationForm from 'ps-react-tarts85/RegistrationForm';\\r\\n\\r\\nexport default class ExampleRegistrationForm extends Component {\\r\\n  onSubmit = (user) => {\\r\\n    console.log(user);\\r\\n  }\\r\\n  \\r\\n  render() {\\r\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\r\\n  }\\r\\n}\\r\\n\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div style={{marginBottom: 16}}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        style={error && {border: 'solid 1px red'}}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n}\\r\\n\\r\\nexport default TextInput;\\r\\n\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React, { Component } from 'react';\\r\\nimport TextInput from 'ps-react-tarts85/TextInput';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-error\\\"\\r\\n        label=\\\"First name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n      />\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React, { Component } from 'react';\\r\\nimport TextInput from 'ps-react-tarts85/TextInput';\\r\\n\\r\\n/** Optional TextBox */\\r\\nexport default class ExampleOptional extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n          htmlId=\\\"example-optional\\\"\\r\\n          label=\\\"First name\\\"\\r\\n          name=\\\"firstname\\\"\\r\\n          onChange={() => {}}\\r\\n      />\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div className=\\\"textinput\\\">\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && \\\"textinput__input--state-error\\\"}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n}\\r\\n\\r\\nexport default TextInput;\\r\\n\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React, { Component } from 'react';\\r\\nimport TextInputBEM from 'ps-react-tarts85/TextInputBEM';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputBEM\\r\\n        htmlId=\\\"example-error\\\"\\r\\n        label=\\\"First name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n      />\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\nimport styles from './textInput.css';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div className={styles.fieldset}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && styles.inputError}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className={styles.error}>{error}</div>}\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n}\\r\\n\\r\\nexport default TextInput;\\r\\n\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React, { Component } from 'react';\\r\\nimport TextInputCSSModules from 'ps-react-tarts85/TextInputCSSModules';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputCSSModules\\r\\n        htmlId=\\\"example-error\\\"\\r\\n        label=\\\"First name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n      />\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\"}]},{\"name\":\"TextInputStyledComponents\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\nimport styled from 'styled-components';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  const Error = styled.div`\\r\\n    color: red;\\r\\n  `;\\r\\n\\r\\n  const Input = styled.input`\\r\\n    border: ${error && '1px solid red'};\\r\\n    display: block;\\r\\n  `;\\r\\n\\r\\n  const Fieldset = styled.div`\\r\\n    margin-bottom: 16px;\\r\\n  `;\\r\\n\\r\\n  return (\\r\\n    <Fieldset>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <Input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <Error>{error}</Error>}\\r\\n    </Fieldset>\\r\\n  )\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n}\\r\\n\\r\\nexport default TextInput;\\r\\n\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React, { Component } from 'react';\\r\\nimport TextInputStyledComponents from 'ps-react-tarts85/TextInputStyledComponents';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputStyledComponents\\r\\n        htmlId=\\\"example-error\\\"\\r\\n        label=\\\"First name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n      />\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\"}]}]","import React from 'react';\r\nimport EyeIcon from 'ps-react-tarts85/EyeIcon';\r\n\r\nexport default function Example() {\r\n  return <EyeIcon />\r\n}\r\n","import React from 'react';\r\nimport Label from 'ps-react-tarts85/Label';\r\n\r\n/** Optional label */\r\nexport default function ExampleOptional() {\r\n  return <Label htmlFor=\"test\" label=\"test\" />\r\n}\r\n","import React from 'react';\r\nimport Label from 'ps-react-tarts85/Label';\r\n\r\n/** Required label */\r\nexport default function ExampleRequired() {\r\n  return <Label htmlFor=\"test\" label=\"test\" required />\r\n}","import React, { Component } from 'react';\r\nimport PasswordInput from 'ps-react-tarts85/PasswordInput';\r\n\r\n/** All features enabled */\r\nclass ExampleAllFeatures extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        password: ''\r\n    }\r\n  }\r\n\r\n  getQuality() {\r\n    const length = this.state.password.length;\r\n    return length > 10 ? 100 : length * 10;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <PasswordInput\r\n          htmlId=\"password-input-example-all-features\"\r\n          name=\"password\"\r\n          onChange={ event => this.setState({ password: event.target.value })}\r\n          value={this.state.password}\r\n          minLength={8}\r\n          placeholder=\"Enter password\"\r\n          showVisibilityToggle\r\n          quality={this.getQuality()}\r\n          {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ExampleAllFeatures;\r\n","import React from 'react';\r\nimport ProgressBar from 'ps-react-tarts85/ProgressBar';\r\n\r\n/** 100% progress and height 20px */\r\nexport default function Example100Percent() {\r\n  return <ProgressBar percent={100} width={150} height={20} />\r\n}","import React from 'react';\r\nimport ProgressBar from 'ps-react-tarts85/ProgressBar';\r\n\r\n/** 10% progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={10} width={150} />\r\n}\r\n","import React from 'react';\r\nimport ProgressBar from 'ps-react-tarts85/ProgressBar';\r\n\r\n/** 70% progress */\r\nexport default function Example70Percent() {\r\n  return <ProgressBar percent={70} width={150} />\r\n}","import React, { Component } from 'react';\r\nimport TextInput from 'ps-react-tarts85/TextInput';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-error\"\r\n        label=\"First name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n      />\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport TextInput from 'ps-react-tarts85/TextInput';\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n          htmlId=\"example-optional\"\r\n          label=\"First name\"\r\n          name=\"firstname\"\r\n          onChange={() => {}}\r\n      />\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** A super lame component that says Hello with a custom message. */\r\nconst HelloWorld = ({ message }) => {\r\n  return <div>Hello {message}</div>;\r\n};\r\n\r\nHelloWorld.propTypes = {\r\n  /** Message to display */\r\n  message: PropTypes.string,\r\n};\r\n\r\nHelloWorld.defaultProps = {\r\n  message: 'World',\r\n};\r\n\r\nexport default HelloWorld;\r\n","import React from 'react';\r\nimport HelloWorld from 'ps-react-tarts85/HelloWorld';\r\n\r\n/** Custom message */\r\nexport default function ExampleHelloWorld() {\r\n  return <HelloWorld message='Pluralsight viewers!' />;\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextInput from '../TextInput';\r\nimport PasswordInput from '../PasswordInput';\r\n\r\n/** Registration form with built-in validation */\r\nclass RegistrationForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: {\r\n          email: '',\r\n          password: ''\r\n      },\r\n      errors: {},\r\n      submitted: false,\r\n    };\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const user = this.state.user;\r\n    user[event.target.name] = event.target.value;\r\n    this.setState({user});\r\n  }\r\n\r\n  // Returns a number from 0 to 100 that represents password quality.\r\n  // From simplicity, just returning % of min length entered.\r\n  // Could enhance with checks for number, special char, unique char, etc.\r\n  passwordQuality(password) {\r\n    if (!password) return null;\r\n    if (password.length >= this.props.minPasswordLength) return 100;\r\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\r\n    return percentOfMinLength;\r\n  }\r\n\r\n  validate({email, password}) {\r\n    const errors = {};\r\n    const {minPasswordLength} = this.props;\r\n\r\n    if (!email) errors.email = 'Email required.';\r\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n\r\n    this.setState({errors});\r\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n    return formIsValid;\r\n  }\r\n\r\n  onSubmit = () => {\r\n    const {user} = this.state;\r\n    const formIsValid = this.validate(user);\r\n    if (formIsValid) {\r\n        this.props.onSubmit(user);\r\n        this.setState({submitted: true});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {errors, submitted} = this.state;\r\n    const {email, password} = this.state.user;\r\n\r\n    return (\r\n      submitted ? \r\n      <h2>{this.props.confirmationMessage}</h2> :\r\n      <div>\r\n        <TextInput\r\n          htmlId=\"registration-form-email\"\r\n          name=\"email\"\r\n          onChange={this.onChange}\r\n          label=\"Email\"\r\n          value={email}\r\n          errors={errors.email}\r\n          required />\r\n\r\n        <PasswordInput\r\n          htmlId=\"registration-form-password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={this.onChange}\r\n          quality={this.passwordQuality(password)}\r\n          showVisibilityToggle\r\n          maxLength={50}\r\n          error={errors.password} />\r\n        \r\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Message displayed upon successful submission */\r\n  confirmationMessage: PropTypes.string,\r\n\r\n  /** Called when form is submitted */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Minimum password length */\r\n  minPasswordLength: PropTypes.number\r\n};\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: \"Thanks for registering!\",\r\n  minPasswordLength: 8\r\n};\r\n\r\nexport default RegistrationForm;","import React, { Component } from 'react';\r\nimport RegistrationForm from 'ps-react-tarts85/RegistrationForm';\r\n\r\nexport default class ExampleRegistrationForm extends Component {\r\n  onSubmit = (user) => {\r\n    console.log(user);\r\n  }\r\n  \r\n  render() {\r\n    return <RegistrationForm onSubmit={this.onSubmit} />\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div className=\"textinput\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && \"textinput__input--state-error\"}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className=\"textinput__error\">{error}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default TextInput;\r\n\r\n","import React, { Component } from 'react';\r\nimport TextInputBEM from 'ps-react-tarts85/TextInputBEM';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends Component {\r\n  render() {\r\n    return (\r\n      <TextInputBEM\r\n        htmlId=\"example-error\"\r\n        label=\"First name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n      />\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\nimport styles from './textInput.css';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div className={styles.fieldset}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && styles.inputError}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className={styles.error}>{error}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default TextInput;\r\n\r\n","import React, { Component } from 'react';\r\nimport TextInputCSSModules from 'ps-react-tarts85/TextInputCSSModules';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends Component {\r\n  render() {\r\n    return (\r\n      <TextInputCSSModules\r\n        htmlId=\"example-error\"\r\n        label=\"First name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n      />\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\nimport styled from 'styled-components';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  const Error = styled.div`\r\n    color: red;\r\n  `;\r\n\r\n  const Input = styled.input`\r\n    border: ${error && '1px solid red'};\r\n    display: block;\r\n  `;\r\n\r\n  const Fieldset = styled.div`\r\n    margin-bottom: 16px;\r\n  `;\r\n\r\n  return (\r\n    <Fieldset>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <Input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        {...props}/>\r\n        {children}\r\n      {error && <Error>{error}</Error>}\r\n    </Fieldset>\r\n  )\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default TextInput;\r\n\r\n","import React, { Component } from 'react';\r\nimport TextInputStyledComponents from 'ps-react-tarts85/TextInputStyledComponents';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends Component {\r\n  render() {\r\n    return (\r\n      <TextInputStyledComponents\r\n        htmlId=\"example-error\"\r\n        label=\"First name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n      />\r\n    )\r\n  }\r\n}\r\n","var map = {\n\t\"./EyeIcon/Example\": 22,\n\t\"./EyeIcon/Example.js\": 22,\n\t\"./HelloWorld/ExampleHelloWorld\": 31,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 31,\n\t\"./Label/ExampleOptional\": 23,\n\t\"./Label/ExampleOptional.js\": 23,\n\t\"./Label/ExampleRequired\": 24,\n\t\"./Label/ExampleRequired.js\": 24,\n\t\"./PasswordInput/ExampleAllFeatures\": 25,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 25,\n\t\"./ProgressBar/Example100Percent\": 26,\n\t\"./ProgressBar/Example100Percent.js\": 26,\n\t\"./ProgressBar/Example10Percent\": 27,\n\t\"./ProgressBar/Example10Percent.js\": 27,\n\t\"./ProgressBar/Example70Percent\": 28,\n\t\"./ProgressBar/Example70Percent.js\": 28,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 32,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 32,\n\t\"./TextInput/ExampleError\": 29,\n\t\"./TextInput/ExampleError.js\": 29,\n\t\"./TextInput/ExampleOptional\": 30,\n\t\"./TextInput/ExampleOptional.js\": 30,\n\t\"./TextInputBEM/ExampleError\": 33,\n\t\"./TextInputBEM/ExampleError.js\": 33,\n\t\"./TextInputCSSModules/ExampleError\": 34,\n\t\"./TextInputCSSModules/ExampleError.js\": 34,\n\t\"./TextInputStyledComponents/ExampleError\": 35,\n\t\"./TextInputStyledComponents/ExampleError.js\": 35\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 64;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Navigation = ({ components }) => {\r\n  return (\r\n    <ul className='navigation'>\r\n      {components.map((name) => {\r\n        return (\r\n          <li key={name}>\r\n            <a href={`#${name}`}>{name}</a>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport hljs from 'highlight.js/lib/core';\r\nimport javascript from 'highlight.js/lib/languages/javascript';\r\n\r\nclass CodeExample extends Component {\r\n  componentDidMount() {\r\n    hljs.registerLanguage('javascript', javascript);\r\n    hljs.highlightBlock(this.element);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre\r\n        ref={(ref) => {\r\n          this.element = ref;\r\n        }}\r\n      >\r\n        <code>{this.props.children}</code>\r\n      </pre>\r\n    );\r\n  }\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CodeExample;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CodeExample from './CodeExample';\r\n\r\nclass Example extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCode: false };\r\n  }\r\n\r\n  toggleCode = (event) => {\r\n    event.preventDefault();\r\n    this.setState((prevState) => {\r\n      return { showCode: !prevState.showCode };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { showCode } = this.state;\r\n    const { code, description, name } = this.props.example;\r\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\r\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`)\r\n      .default;\r\n    return (\r\n      <div className='example'>\r\n        {description && <h4>{description}</h4>}\r\n\r\n        <ExampleComponent />\r\n\r\n        <p>\r\n          <a href='#' onClick={this.toggleCode}>\r\n            {showCode ? 'Hide' : 'Show'} Code\r\n          </a>\r\n        </p>\r\n\r\n        {showCode && <CodeExample>{code}</CodeExample>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nExample.propTypes = {\r\n  example: PropTypes.object.isRequired,\r\n  componentName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Example;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Props = ({ props }) => {\r\n  return (\r\n    <table className='props'>\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>Type</th>\r\n          <th>Default</th>\r\n          <th>Required</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Object.keys(props).map((key) => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{props[key].description}</td>\r\n              <td>{props[key].type.name}</td>\r\n              <td>\r\n                {props[key].defaultValue && props[key].defaultValue.value}\r\n              </td>\r\n              <td>{props[key].required && 'X'}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nProps.propTypes = {\r\n  props: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Props;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Example from './Example';\r\nimport Props from './Props';\r\n\r\nconst ComponentPage = ({ component }) => {\r\n  const { name, description, props, examples } = component;\r\n\r\n  return (\r\n    <div className='componentpage'>\r\n      <h2>{name}</h2>\r\n      <p>{description}</p>\r\n\r\n      <h3>Example{examples.length > 1 && 's'}</h3>\r\n      {examples.length > 0\r\n        ? examples.map((example) => (\r\n            <Example\r\n              key={example.code}\r\n              example={example}\r\n              componentName={name}\r\n            />\r\n          ))\r\n        : 'No examples exist.'}\r\n\r\n      <h3>Props</h3>\r\n      {props ? <Props props={props} /> : 'This component accepts no props.'}\r\n    </div>\r\n  );\r\n};\r\n\r\nComponentPage.propTypes = {\r\n  component: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ComponentPage;\r\n","import React, { Component } from 'react';\r\nimport Navigation from './Navigation';\r\nimport ComponentPage from './ComponentPage';\r\nimport componentData from '../../config/componentData';\r\n\r\nexport default class Docs extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      route: window.location.hash.substr(1),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('hashchange', () => {\r\n      this.setState({ route: window.location.hash.substr(1) });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { route } = this.state;\r\n    const component = route\r\n      ? componentData.filter((component) => component.name === route)[0]\r\n      : componentData[0];\r\n    return (\r\n      <div>\r\n        <Navigation\r\n          components={componentData.map((component) => component.name)}\r\n        />\r\n        <ComponentPage component={component} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Docs from './docs/Docs';\r\nimport './index.css';\r\nimport '../node_modules/highlight.js/styles/atom-one-dark.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Docs />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}